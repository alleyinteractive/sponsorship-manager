# Travis CI (MIT License) configuration file for the Underscores WordPress theme
# @link https://travis-ci.org/

# For use with the Underscores WordPress theme
# @link https://github.com/Automattic/_s

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
php:
    # aliased to a recent 5.5.x version
    - "5.5"
    # aliased to a recent 5.4.x version
    - "5.4"
    # aliased to a recent 5.3.x version
    - "5.3"

# Declare which versions of WordPress to test against.
# Also declare whether or not to test in Multisite.
env:
    # Trunk
    # @link https://github.com/WordPress/WordPress
    - WP_VERSION=master WP_MULTISITE=0
    - WP_VERSION=master WP_MULTISITE=1
    # WordPress 4.1
    # @link https://github.com/WordPress/WordPress/tree/4.1-branch
    - WP_VERSION=4.3 WP_MULTISITE=0
    - WP_VERSION=4.3 WP_MULTISITE=1

# Declare 5.6 beta in test matrix.
# @link https://buddypress.trac.wordpress.org/ticket/5620
# @link http://docs.travis-ci.com/user/build-configuration/
matrix:
    include:
        - php: 5.6
          env: WP_VERSION=master
    allow_failures:
        - php: 5.6
    fast_finish: true

# Specify when travis should build.
# Mainly, we don't want to build on feature branches, just on master, vip, and
# during pull requests.
branches:
  only:
    - master

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
# before_install:

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    # Set up WordPress installation.
    - export WP_DEVELOP_DIR=/tmp/wordpress/
    - export WP_TESTS_DIR=/tmp/wordpress/tests/phpunit
    - export WP_CORE_DIR=/tmp/wordpress/src/
    - mkdir -p $WP_DEVELOP_DIR
    # Use the Git mirror of WordPress.
    - git clone --depth=50 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
    # Set up theme information. If this is a VIP theme, we add the "vip/" prefix
    - theme_slug="vip/$(basename $(pwd))"
    - mkdir -p "/tmp/wordpress/src/wp-content/themes/$theme_slug"
    - cp -R . "/tmp/wordpress/src/wp-content/themes/$theme_slug/"
    # Checkout VIP plugins if we need to
    - cd /tmp/wordpress/src/wp-content/themes/vip/
    - svn co https://vip-svn.wordpress.com/plugins/
    # Install any required plugins. Using svn is the best bet.
    - cd /tmp/wordpress/src/wp-content/plugins/
    - svn co http://plugins.svn.wordpress.org/jetpack/trunk jetpack
    # Set up WordPress configuration.
    - cd $WP_DEVELOP_DIR
    - echo $WP_DEVELOP_DIR
    - cp wp-tests-config-sample.php wp-tests-config.php
    - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
    - sed -i "s/yourusernamehere/root/" wp-tests-config.php
    - sed -i "s/yourpasswordhere//" wp-tests-config.php
    - echo "define( 'WP_DEFAULT_THEME', '$theme_slug' );" >> /tmp/wordpress/wp-tests-config.php
    - echo "define( 'JETPACK_DEV_DEBUG', true );" >> /tmp/wordpress/wp-tests-config.php
    # Create WordPress database.
    - mysql -e 'CREATE DATABASE wordpress_test;' -uroot
    # Hop into themes directory.
    - cd /tmp/wordpress/src/wp-content/themes/$theme_slug/
    # We don't need to check against coding standards in every version of WP,
    # but we will check against every version of PHP.
    - if [[ "$WP_VERSION" == "master" && "$WP_MULTISITE" == "0" ]]; then ./ci/setup_codesniffer.sh; fi;

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # Search for PHP syntax errors once per PHP version
    - if [[ "$WP_VERSION" == "master" && "$WP_MULTISITE" == "0" ]]; then find . -name "*.php" -exec php -lf {} \;; fi;
    # Check against WordPress Coding Standards once per PHP version
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    - if [[ "$WP_VERSION" == "master" && "$WP_MULTISITE" == "0" ]]; then /tmp/wordpress/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php; fi;
    # Test the theme
    - phpunit

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: false